ea.experiment(
  runs = (randomGenerator = (seed = [1:1:10]) * [m.defaultRG()]) *
    (problem = 
      (environment = 
      	(arena = [A_MAZE])
      	* 
      	[ds.e.navigation(sensorRange = 3; nOfSensors = 5)]
      ) 
      *
      (f = [ds.e.n.finalD()])
      	*
      [ea.p.numEnvTo(finalT = 60)]
    ) 
    * 
    (solver = 
      (nEval = [10000])
      *
      (mapper = 
      	(npnds = [ds.num.mlp(innerLayerRatio = 3; nOfInnerLayers = 1)])
      	* 
      	[ea.m.dsToNpnds()])
      * 
      [ea.s.mapElites(
                       representation = ea.r.doubleString(crossoverP = 0.0);
                       mapper = ea.m.dsToNpnds(npnds = ds.num.mlp(innerLayerRatio = 3.0));
                       nPop = 15;
                       nEval = 10000;
                       descriptors = [
                           ea.s.me.d.descriptor(
                               f = ds.e.n.x(of = ds.e.n.finalRobotP(of = ea.f.simOutcome(of = ea.f.quality())));
                               min = 0;
                               max = 1;
                               nOfBins = 10
                           );
                           ea.s.me.d.descriptor(
                               f = ds.e.n.y(of = ds.e.n.finalRobotP(of = ea.f.simOutcome(of = ea.f.quality())));
                               min = 0;
                               max = 1;
                               nOfBins = 10
                           )
                       ]
                    )]
    )
    * 
    [ea.run()];
  
  listeners = [
    ea.l.bestCsv(
      filePath = "/home/samuele/Desktop/22_thesis/Experiments/exp_24_07/Results/mazes_ME.csv";
      functions = [
        ea.f.simQuality(of = ea.f.quality(of = ea.f.best()); format = "%5.2f");
        ea.f.meBin(of = f.nTh(of = ea.f.meCoordinates(of = ea.f.best()); n = 0));
        ea.f.meBin(of = f.nTh(of = ea.f.meCoordinates(of = ea.f.best()); n = 1))
      ];
      runKeys = [
        ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}");
        ea.misc.sEntry(key = "mazes"; value = "{problem.environment.arena}");
        ea.misc.sEntry(key = "solver"; value = "{solver.name}");
        ea.misc.sEntry(key = "fitness_function"; value = "{problem.f}")
      ]
    );
       ea.l.tui(
              defaultFunctions = [
                  ea.f.size(of = ea.f.all());
                  ea.f.nOfIterations();
                  ea.f.nOfEvals();
                  ea.f.elapsedSecs()
              ];
              functions = [
                  ea.f.simQuality(of = ea.f.quality(of = ea.f.best()); format = "%9.5f");
                  ea.f.meBin(of = f.nTh(of = ea.f.meCoordinates(of = ea.f.best()); n = 0));
                  ea.f.meBin(of = f.nTh(of = ea.f.meCoordinates(of = ea.f.best()); n = 1));
                  ea.f.meValue(of = f.nTh(of = ea.f.meCoordinates(of = ea.f.best()); n = 0));
                  ea.f.meValue(of = f.nTh(of = ea.f.meCoordinates(of = ea.f.best()); n = 1));
                  ea.f.id(of = ea.f.best());
                  f.nTh(of = ea.f.parentIds(of = ea.f.best()); n = 0)
              ];
              runKeys = [
                  ea.misc.sEntry(key = "problem.name"; value = "{problem.name}");
                  ea.misc.sEntry(key = "solver"; value = "{solver.name}");
                  ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}")
              ]
          )
  ]
)
